4/24/15:
need to implement sys_wait(tid_t):
	should mark current process as T_BLOCKED. In order to implement this behavior, 
	each thread should have a pointer in its table to a function with no arguments 
	that returns a boolean indicating if the thread is still blocked or not. In 
	the case of sys_wait, the function mapped to should return true when the 
	thread being waited on has exited, else false.
	
need to complete implementation in fsystem.*
need to complete implementation of Drivers/driver_sdcard.* --> should link up with 
	primitives in fsystem.*
need to add system calls for filesystem operations:
	each thread needs its own filesystem context; (a pointer to) this context should 
	be stored in the thread table entry for that thread. File operations will be
	performed in the kernel and are therefore atomic; in the future, reentrancy should
	be considered (but first the kernel must be made reentrant, which will break a
	whole shitload of stuff) 
	SYS_MOUNT, SYS_UNMOUNT, SYS_LISTDIR, SYS_CHDIR, SYS_TOUCH, SYS_OPEN (should give
	a fd back), SYS_UNLINK, SYS_CP (could be implemented as a combination of *TOUCH, 
	*READ, and *WRITE), SYS_MV (<<<), SYS_
	
need to implement default filestreams (stdint, stdout, stderr) and logging:
	verbose mode --> log everything to files
	
need to implement serial bootloader:
	should use base64 encoding for data transfer; compute checksum on data block and
	confirm with sender before write; make secure bootloader by caching in SD card and
	then flagging bootloader to run at the next power up and read the file from the SD
	into flash

need to implement program loader:
	load executable files from SD card to SRAM and run them
	
need to update lock() and unlock() to use synchronization primitives listed on page 100
	ss. 2.4.7 of tm4c123h6pm.pdf
	
need to implement better parser for shell grammar:
	CMDX -> REDX
	CMDX -> ORX
	CMDX -> ANDX
	CMDX -> PIPEX
	REDX -> CMD "<" FILE
	REDX -> CMD ">" FILE
	FILE -> word
	ORX -> CMD "||" ORX
	ORX -> CMD
	ANDX -> CMD "&&" ANDX
	ANDX -> CMD
	PIPEX -> CMD "|" PIPEX
	PIPEX -> CMD
	CMD -> PROG ARGS
	PROG -> word
	ARGS -> ARG ARGS
	ARGS -> ARG
	ARG -> word
	
need to determine how to handle immediate wait on a spawned/forked child:
	sys_wait(sys_spawn(...)) <-- bad because child can complete before call to wait
	
	can try adding critical-section system call pair (entry - exit) that will lock out
	threads of lower/same privilege
	
	
Functions to implement for filesystems:
void <fsysimpl>unmount(fsys_t fsys)
{

}

bool <fsysimpl>listdir(char* fnamebuf, uint32_t fnamebuflen)
{
	return false;
}

bool <fsysimpl>touch(const char* fname)
{
	return false;
}

fd_t <fsysimpl>open(const char* fname, fmode_t mode, fflags_t flags)
{
	return FD_INVALID;
}

Functions to implement for files:
void <fsysimpl>close(fd_t fd)
{

}

int32_t <fsysimpl>read(fd_t fd, uint8_t* buf, int32_t len)
{
	return RW_INVALID;
}

int32_t <fsysimpl>write(fd_t fd, const uint8_t* buf, int32_t len)
{
	return RW_INVALID;
}

int32_t <fsysimpl>seek(fd_t fd, int32_t pos)
{
	return SEEK_INVALID;
}

uint32_t <fsysimpl>ioctl(fd_t fd, uint32_t mask, void* arg)
{
	return IOCTL_INVALID;
}