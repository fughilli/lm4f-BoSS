4/24/15:
need to implement sys_wait(tid_t):
	should mark current process as T_BLOCKED. In order to implement this behavior, 
	each thread should have a pointer in its table to a function with no arguments 
	that returns a boolean indicating if the thread is still blocked or not. In 
	the case of sys_wait, the function mapped to should return true when the 
	thread being waited on has exited, else false.
	
need to complete implementation in fsystem.*
need to complete implementation of Drivers/driver_sdcard.* --> should link up with 
	primitives in fsystem.*
need to add system calls for filesystem operations:
	each thread needs its own filesystem context; (a pointer to) this context should 
	be stored in the thread table entry for that thread. File operations will be
	performed in the kernel and are therefore atomic; in the future, reentrancy should
	be considered (but first the kernel must be made reentrant, which will break a
	whole shitload of stuff) 
	SYS_MOUNT, SYS_UNMOUNT, SYS_LISTDIR, SYS_CHDIR, SYS_TOUCH, SYS_OPEN (should give
	a fd back), SYS_UNLINK, SYS_CP (could be implemented as a combination of *TOUCH, 
	*READ, and *WRITE), SYS_MV (<<<), SYS_
	
need to implement default filestreams (stdint, stdout, stderr) and logging:
	verbose mode --> log everything to files
	
need to implement serial bootloader:
	should use base64 encoding for data transfer; compute checksum on data block and
	confirm with sender before write; make secure bootloader by caching in SD card and
	then flagging bootloader to run at the next power up and read the file from the SD
	into flash

need to implement program loader:
	load executable files from SD card to SRAM and run them
	
need to update lock() and unlock() to use synchronization primitives listed on page 100
	ss. 2.4.7 of tm4c123h6pm.pdf